（1）collections与collection的区别：collections是一个包含常用的封装好静态的排序方法、线程安全化方法、排序方法等的帮助类，使用对象都是对象集合
	而collection是一个在set和list更低一层的接口，set和list都是继承的collection接口，collection接口又是继承的Iterable接口；
	两个都是在java.util包下，Collections在Concurrunt包下
（2）sort((List<T> list,Comparator<? super T> c):实现对第一个参数的集合的排序，升序排列，用的是str1.compareTo(str2)，原理是在两个的对应位一个个的	比较，有些算法题可以利用这个特点解题；
	例子：使用了匿名类，实现了Comparator的对象的方法来比较
	Collections.sort(list,new Comparator<Integer>(){
            @Override
            public int compare(Integer arg0, Integer arg1) {
                // TODO Auto-generated method stub
                String s1=arg0+""+arg1;
                String s2=arg1+""+arg0;
                return s1.compareTo(s2);
            }
        });
	sort(List<T> list)：还有一个参数的
（3）min()和max()：用于获取列表中的最大值和最小值，与Array.asList()方法结合还可以获取数组中元素的最大值和最小值
	int min = (int) Collections.min(Arrays.asList(numbers));//asList()方法是把数组转换成列表
       	 int max = (int) Collections.max(Arrays.asList(numbers));
（4）shuffle（list）：对集合进行随机排序
（5） binarySearch（list，“”）：查找指定集合中的元素，返回所查找元素的索引//有问题
（6） indexOfSubList(List<?> source,List<?> target)：查找subList在list中首次出现位置的索引
（7)reverse(List<?> list):反转集合中元素的顺序
(8)copy(List<? super T> dest,List<? extends T> src):将集合n中的元素全部复制到m中,并且覆盖相应索引的元素
(9)swap(List<?> list,  int i,int j):交换集合中指定元素索引的位置
（10） fill(List<? super T> list,T obj)；用对象o替换集合list中的所有元素
（11）Map<K,V> synchronizedMap(Map<K,V> m):参数是map对象的集合（是线程不安全的），该方法的返回值就是该集合线程安全的集合，即把参数线程安全化；参数还可以是SortedSet，TreeMap，sortMap这些