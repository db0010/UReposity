12月28日：（1）依赖注入中的构造注入，<constructor-arg></constructor-arg>通过的是pojo中的有参构造函数
	          依赖注入中的set注入，<property name="" value=""></property>通过的是pojo中的无参构造函数（最常用的）
2021年
1月2日：  （1）id属性和name属性都是标识一个bean的，一个bean里面只能有一个id，但是可以有多个name
	（2）scope属性有prototype（原型），每次获得的bean都不同，hashcode()不一样
		scope属性singleton（单例），每次获得的bean都是同一个,hashcode()一样
	（3）使用@Autowired注解自动装配bean依赖，暂时只知道省略了set()方法，使用的是反射机制
1月18日：（1）在一个maven项目中新建spring时，先配置pom.xml文件，先添加<dependencies>标签，再在标签内部导入spring的依赖包，5.2.0和4.2.6下载了
	下面是pom.xml文件的<dependencies>标签里面
	<!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>5.2.0.RELEASE</version>
        </dependency>
	下面是加在appplicationContext文件里的
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd">

<!-- 在这里加入内容 -->
</beans>
	（2）配置文件中的注释是用的<!--内容-->
	  (3)在resourse的目录右键新建xml里面的spring配置文件，会自动生成bean上面的配置信息
	（4）ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");参数是字符串，内容是上下文配置文件的名称
    		Dog dog= (Dog) context.getBean("Dog");通过上下文对象的getBean()方法获取工厂里的Dog对象，可以通过强制转换类型
		Dog dog= context.getBean("Dog",Dog.class);也可以通过getBean()的两个参数的构造重载函数，第二个参数的反射来变为Dog的类
1月19日：（1）bean标签必须有class属性，指定类的意思
	bean标签的常用属性：
	id和name：两个属性都是为了唯一标识一个bean，两者不能一样
	scope：该属性的值有singleton(获取的bean对象都是同一个)和prototype(获取的bean对象不是同一个，每次都会创建一个新的bean),
		用法:<bean id="userFactory" class="lzgsea.factory.UserFactory"></bean>	
			<bean id="user" factory-bean="userFactory" factory-method="createUser"></bean>
	init-method和destory-method:分别在bean初始化之后调用和在bean销毁之前调用
	（2）装配bean的方法有三种：都是用在多个bean有依赖关系的情况下使用以下的方式
	1.手动装配：在People的下面<property>标签上添加Cat和dog，相当于就帮Cat和dog绑定在了People上；这种方法需要添加每个bean的set方法
			因为似乎property标签就是通过set注入的依赖；主要操作是有property标签的ref属性实现的，引用的意思
	2.通过bean标签的autowire属性自动装配：该方法还是要每个bean的set方法；该属性有一下几个值
		byName:在配置文件中还要设置id或者name属性,原理实在上下文配置文件中寻找与自己的set方法名字一样的id或者name
		byType:通过class类型去寻找bean，不需要设置id或者name属性；类型一样的bean只能有一个，否则无法自动装配
		constructor:通过People类里面设置参数为cat加dog的构造函数实现的自动装配
		autodetect：通过bean的内省机制来决定使用byType方式还是constructor方式
		default：由上级标签的default-autowire属性确定
		no ： 默认值，不进行自动装配
	3.通过@Autowired注解自动装配：在People类里面定义其他类的对象的时候使用
		这种方法最简便的，既不用写set方法，也不用property标签和bean的autowire属性
1月20日：（1）要使用注解时，在上下文配置文件中要这样配置：
	<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">
<context:annotation-config/>
	（2）@required注解的功能及用法：功能是只检查属性是否已经设置而不会测试属性是否非空；且只能用用在setter方法上（不过好像过时了）
1月21日：（1）ioc容器依赖注入的方式有：xml文件、注解、java配置；java配置用的是AnnotationConfigApplicationContext这个上下文配置类，例子：
	ApplicationContext context=new AnnotationConfigApplicationContext(MyConfigure.class);//参数很重要
       	Cat cat1= (Cat) context.getBean("getCat");
	(2)要自己写个MyConfigurejava类，这个类用@Configuration,类里面配置@bean;例子：
@Configuration
public class MyConfigure {
    @Bean
    public Cat getCat(){
        return new Cat();
    }
	（3）pojo类需要用@Component注解，意思是成为了java配置类的一个组件
1月25日：（1）使用spring的AOP来处理程序的横向事务，下面是要使用aop的ApplicationContext的xml配置文件
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop" xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
    
</beans>
	（2）日志功能：要写在执行方法之前的日志，需要写个java类来继承implements MethodBeforeAdvice，需要重写void before(Method method, Object[] args, Object target)方法，第一个参数是纵向运行的方法，例如add(),delete()等，第二个参数是代理类需要传的参数数组，第三个类是代理类，代理类用的是.getClass()反射来获取的，再用getName()来获取源类的名字；卸载日志方法之后的类，要继承implements AfterReturningAdvice接口，实现的方法是四个参数的，相比于MethodBeforeAdivce要多了第一个参数返回值，void afterReturning(Object returnValue, Method method, Object[] objects, Object target)
	（3）这个也可以用元数据配置的三种方法中的一个配置，UserService userService= (UserService) context.getBean("UserServiceImpl");在获取bean的时候是用的接口的对象，因为代理机制代理的是接口，而不是类，但是在getBean的参数确是实现类，因为在上下文xml文件中没有配置接口的bean标签；这里也可以使用getBean的第二个参数为反射，但是得是UserService得反射
	（4）还需要再上下文xml配置文件中配置aop，这样才能让日志类与service类连接起来：
<aop:config>
        <aop:pointcut id="pointcut" expression="execution(* com.xiaobin.servise.UserService.*(..))"/>
        <aop:advisor advice-ref="Log" pointcut-ref="pointcut"/>
        <aop:advisor advice-ref="AfterLog" pointcut-ref="pointcut"/>
    </aop:config>
写完pointcut之后要配置advisor，advice-ref是自己写的日志类，例如Log和AfterLog，pointcut-ref是指定切入点的标签，切入点标签pointcut的id属性可以自己定义的，可以有多个pointcut标签，后面的expression属性是表达式，指定用那个路径下的那些方法，可以写死，也可以弄个范围，第一个*号意思是指返回值是任意类型 ，后面接所要使用日志功能的所在类路径，加.*()意思是该类下的任意方法，参数是..表示是任意参数；
	（5）上面的Aop方式是使用的spring的AOP的API实现的；方式二是通过自定义切面类来实现AOP，不过这种方式就没有第一种的API方式那么灵活；
操作过程是通过创建一个普通的java类，类里面填加写准备插入其他类里面的方法，比如before(),after()等等，这个java类充当一个切面类；接着就是上下文xml配置文件有所不同，首先要添加刚才新创建的java类的bean，后面在配置aop:
<aop:config>
        <aop:aspect ref="aop">
            <aop:pointcut id="point" expression="execution(* com.xiaobin.servise.UserServiceImpl.*(..))"/>
            <aop:before method="before" pointcut-ref="point"/>
            <aop:after method="after" pointcut-ref="point"/>
        </aop:aspect>
    </aop:config>
ref的值上上面自定义的切面类的bean的id属性值，还是一样的要写切入点，就是要把自定义的切面类里面的方法准备插入在那些类的里面，然后是aop:before属性等，这些标签的method属性值是要插入的方法名，后面是切入点的标签地址；

2月11日：（1）@RequestMapping注解